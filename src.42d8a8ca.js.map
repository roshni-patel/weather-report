{"version":3,"sources":["src/index.js"],"names":["state","playgroundTemp","displayedLiveTemp","liveTempInK","liveWeather","unit","city","playgroundTempElement","document","getElementById","skyOptionElement","celsiusButton","fahrenheitButton","degreeSymbol","String","fromCharCode","displayCityName","textContent","resetCityName","submitCity","event","input","querySelector","value","preventDefault","getCurrentCity","success","position","console","log","lat","coords","latitude","lon","longitude","getCityFromLatLon","displayWeatherInfo","navigator","geolocation","getCurrentPosition","err","warn","code","message","alert","axios","get","response","data","address","updatePlaygroundColor","tempTextColor","gardenBgColor","landscapeText","weatherGardenElement","landscapeElement","style","color","backgroundColor","updatePlayground","tempF","convertCToF","displayPlaygroundTemp","skyMapping","Sunny","Cloudy","Rainy","Snowy","updateSky","innerText","getRealWeatherInfo","getLatLongFromCityName","current","temp","weather","description","currentCityName","displayLiveWeatherDescription","displayLiveTemp","convertKToF","convertKToC","updatePlaygroundTemp","change","updatePlaygroundRealTemp","convertFToC","Math","round","tempC","tempK","convertAllToCelsius","disabled","convertAllToFahrenheit","getTodayDateAsString","Date","toLocaleString","timeZone","dateStyle","timeStyle","displayDateTime","todayDateElement","currentTimeElement","split","date","time","setTimeout","registerEventHandlers","addEventListener","e"],"mappings":"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","file":"src.42d8a8ca.js","sourceRoot":"..","sourcesContent":["'use strict';\n// import 'regenerator-runtime/runtime';\n// import axios from 'axios';\n\n// default state\nconst state = {\n  playgroundTemp: 60,\n  displayedLiveTemp: null,\n  liveTempInK: null,\n  liveWeather: null,\n  unit: 'F',\n  city: 'Seattle',\n};\n\n// --- HTML DOM Elements ---\nconst playgroundTempElement = document.getElementById('playground-temp');\nconst skyOptionElement = document.getElementById('sky-select');\nconst celsiusButton = document.getElementById('celsius');\nconst fahrenheitButton = document.getElementById('fahrenheit');\n\n// Other global const\nconst degreeSymbol = String.fromCharCode(176);\n\n// --- City Name --- //\nconst displayCityName = () => {\n  document.getElementById('city-name').textContent = state.city;\n};\n\nconst resetCityName = () => {\n  state.city = 'Seattle';\n  displayCityName();\n};\n\nconst submitCity = (event) => {\n  // update city name from input form\n  const input = document.querySelector('input');\n  if (input.value) {\n    state.city = input.value;\n  }\n  input.value = '';\n  event.preventDefault();\n  displayCityName();\n};\n\nconst getCurrentCity = () => {\n  // using HTML Geolocation API to get coordinates of the current location if browser permits\n  const success = async (position) => {\n    // This function will make an API call to LocationIQ reverse geocoding API\n    // to get city name from lat & lon\n    // and display the current city name\n    console.log('HTML Geolocation API called.');\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    const city = await getCityFromLatLon(lat, lon);\n    if (city) {\n      state.city = `${city}`;\n    }\n    displayCityName();\n    await displayWeatherInfo(); // API call\n  };\n\n  const error = (err) => {\n    console.warn(`ERROR(${err.code}):${err.message}`);\n    alert('Your browser does not permit location sharing.');\n  };\n\n  navigator.geolocation.getCurrentPosition(success, error);\n};\n\nconst getCityFromLatLon = async (lat, lon) => {\n  // This function will make an API call to LocationIQ reverse geocoding API\n  try {\n    const response = await axios.get(\n      `https://weather-report-backend.herokuapp.com/location/reverse?lat=${lat}&lon=${lon}`\n    );\n    const city = response.data.address.city;\n    console.log('LocationIQ Reverse Geocoding called by getCityFromLatLon');\n    return city;\n  } catch (error) {\n    console.log(error);\n    console.log('error in getCityFromLatLon');\n  }\n};\n\n// --- Playground box --- //\n\nconst updatePlaygroundColor = (tempTextColor, gardenBgColor, landscapeText) => {\n  const weatherGardenElement = document.getElementById('weather-garden');\n  const landscapeElement = document.getElementById('landscape');\n  const weatherGardenTextElement = document.getElementById(\n    'weather-garden-text'\n  );\n\n  playgroundTempElement.style.color = tempTextColor;\n  weatherGardenElement.style.backgroundColor = gardenBgColor;\n  landscapeElement.textContent = landscapeText;\n};\n\nconst updatePlayground = () => {\n  const tempF =\n    state.unit === 'F'\n      ? state.playgroundTemp\n      : convertCToF(state.playgroundTemp);\n  if (tempF >= 80) {\n    updatePlaygroundColor('red', 'red', '🌵__🐍_🦂_🌵🌵__🐍_🏜_🦂');\n  } else if (tempF >= 70) {\n    updatePlaygroundColor('orange', 'yellow', '🌸🌿🌼__🌷🌻🌿_☘️🌱_🌻🌷');\n  } else if (tempF >= 60) {\n    updatePlaygroundColor('#F6BE00', 'pink', '🌾🌾_🍃_🪨__🛤_🌾🌾🌾_🍃');\n  } else if (tempF >= 50) {\n    updatePlaygroundColor('green', 'teal', '🌲🌲⛄️🌲⛄️🍂🌲🍁🌲🌲⛄️🍂🌲');\n  } else {\n    updatePlaygroundColor('teal', 'grey', '🌲🌲⛄️🌲⛄️🍂🌲🍁🌲🌲⛄️🍂🌲');\n  }\n  displayPlaygroundTemp();\n};\n\nconst skyMapping = {\n  Sunny: '☀️☁️ ☀️☁️ ☀️ ☁️☀️ ☁️ ☀️ ☁️',\n  Cloudy: '☁️☁️ ☁️ ☁️☁️ ☁️ 🌤 ☁️ ☁️☁️',\n  Rainy: '🌧🌈⛈🌧🌧💧⛈🌧🌦🌧💧🌧🌧',\n  Snowy: '🌨❄️🌨🌨❄️❄️🌨❄️🌨❄️❄️🌨🌨',\n};\n\nconst updateSky = () => {\n  document.getElementById('sky').innerText = skyMapping[skyOptionElement.value];\n};\n\n// --- Get Realtime Weather Info based on current city name --- //\nconst getRealWeatherInfo = async () => {\n  // This function will make an API call to OpenWeather\n  try {\n    const [lat, lon] = await getLatLongFromCityName();\n    const response = await axios.get(\n      `https://weather-report-backend.herokuapp.com/weather?lat=${lat}&lon=${lon}`\n    );\n    state.liveTempInK = response.data.current.temp;\n    state.liveWeather = response.data.current.weather[0].description;\n    console.log('OpenWeather API called by getRealWeatherInfo');\n  } catch (error) {\n    console.log(error);\n    console.log('error in getRealWeatherInfo');\n  }\n};\n\nconst getLatLongFromCityName = async () => {\n  // This function will make an API call to LocationIQ\n  try {\n    const currentCityName = state.city;\n    const response = await axios.get(\n      `https://weather-report-backend.herokuapp.com/location?q=${currentCityName}`\n    );\n    console.log('LocationIQ API called by getLatLongFromCityName');\n    return [response.data[0].lat, response.data[0].lon];\n  } catch (error) {\n    console.log(error);\n    console.log('error in getLatLongFromCityName');\n  }\n};\n\nconst displayWeatherInfo = async () => {\n  await getRealWeatherInfo(); // API call\n  displayLiveWeatherDescription();\n  displayLiveTemp();\n  displayPlaygroundTemp();\n};\n\nconst displayLiveWeatherDescription = () => {\n  document.getElementById('weather-description').textContent =\n    state.liveWeather;\n};\n\n// --- Live Temp of displayed city --- //\nconst displayLiveTemp = () => {\n  state.displayedLiveTemp =\n    state.unit === 'F'\n      ? convertKToF(state.liveTempInK)\n      : convertKToC(state.liveTempInK);\n\n  const liveTempElement = document.getElementById('live-temp');\n  liveTempElement.textContent = `${state.displayedLiveTemp}${degreeSymbol}${state.unit}`;\n};\n\n// --- Playground Temp --- //\nconst updatePlaygroundTemp = (change) => (state.playgroundTemp += change);\n\nconst displayPlaygroundTemp = () =>\n  (playgroundTempElement.textContent = `${state.playgroundTemp}${degreeSymbol}${state.unit}`);\n\nconst updatePlaygroundRealTemp = () => {\n  displayLiveTemp();\n  state.playgroundTemp = state.displayedLiveTemp;\n  displayPlaygroundTemp();\n};\n\n// Temperature conversion\n\nconst convertFToC = (tempF) => Math.round((5 / 9) * (tempF - 32));\nconst convertCToF = (tempC) => Math.round(tempC * (9 / 5) + 32);\nconst convertKToC = (tempK) => Math.round(tempK - 273.15);\nconst convertKToF = (tempK) => Math.round((tempK - 273.15) * (9 / 5) + 32);\n\nconst convertAllToCelsius = () => {\n  celsiusButton.disabled = true;\n  fahrenheitButton.disabled = false;\n  state.unit = 'C';\n  state.playgroundTemp = convertFToC(state.playgroundTemp);\n  state.displayedLiveTemp = convertKToC(state.liveTempInK);\n  displayPlaygroundTemp();\n  displayLiveTemp();\n};\n\nconst convertAllToFahrenheit = () => {\n  fahrenheitButton.disabled = true;\n  celsiusButton.disabled = false;\n  state.unit = 'F';\n  state.playgroundTemp = convertCToF(state.playgroundTemp);\n  state.displayedLiveTemp = convertKToF(state.liveTempInK);\n  displayPlaygroundTemp();\n  updatePlayground();\n};\n\n// --- Display Live Date Time --- //\nconst getTodayDateAsString = () => {\n  const utcDateTime = new Date();\n  const pstDateTime = utcDateTime.toLocaleString('en-US', {\n    timeZone: 'America/Los_Angeles',\n    dateStyle: 'full',\n    timeStyle: 'long',\n  });\n  return pstDateTime;\n};\n\nconst displayDateTime = () => {\n  const updateDateTime = () => {\n    setTimeout(displayDateTime, 1000);\n  };\n\n  const todayDateElement = document.getElementById('today-date');\n  const currentTimeElement = document.getElementById('current-time');\n  const dateTimeString = getTodayDateAsString();\n  const [date, time] = dateTimeString.split(' at ');\n  todayDateElement.textContent = date;\n  currentTimeElement.textContent = time;\n  updateDateTime();\n};\n\n// --- Main script --- //\nfahrenheitButton.disabled = true;\n\ndisplayDateTime();\n\nif (state.liveTempInK === null) {\n  displayWeatherInfo();\n}\n\nconst registerEventHandlers = () => {\n  celsiusButton.addEventListener('click', convertAllToCelsius);\n  fahrenheitButton.addEventListener('click', convertAllToFahrenheit);\n\n  skyOptionElement.addEventListener('change', updateSky);\n\n  const increaseButton = document.getElementById('increase-button');\n  increaseButton.addEventListener('click', () => {\n    updatePlaygroundTemp(1);\n    updatePlayground();\n  });\n\n  const decreaseButton = document.getElementById('decrease-button');\n  decreaseButton.addEventListener('click', () => {\n    updatePlaygroundTemp(-1);\n    updatePlayground();\n  });\n\n  const resetButton = document.getElementById('reset-button');\n  resetButton.addEventListener('click', async () => {\n    resetCityName();\n    await displayWeatherInfo(); // API call\n  });\n\n  const form = document.getElementById('form');\n  form.addEventListener('submit', async (e) => {\n    submitCity(e);\n    await displayWeatherInfo(); // API call\n  });\n\n  const getRealTimeTempButton = document.getElementById('get-realtime-temp');\n  getRealTimeTempButton.addEventListener('click', async () => {\n    await getRealWeatherInfo(); // API call\n    updatePlaygroundRealTemp();\n  });\n\n  const currentCityButton = document.getElementById('get-current-city-button');\n  currentCityButton.addEventListener('click', () => {\n    getCurrentCity(); // API call\n    alert('Please wait a few seconds to get your current location.');\n  });\n};\n\ndocument.addEventListener('DOMContentLoaded', registerEventHandlers);\n"]}